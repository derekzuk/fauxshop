<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
		http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
	
	<var name="transactionLogValues" class="com.fauxshop.spring.model.TransactionLog"/>
	
	<on-start>
		<evaluate expression="externalContext.nativeRequest.session.id" result="flowScope.currentSession"/>
		<set name="requestScope.currentUser" value="currentUser"/>
		<set name="requestScope.cartService" value="cartService"/>
	</on-start>			
	
	<!-- By default, the first state is the start state. -->
	<view-state id="cart" view="cart">
		<on-render>
			<set name="requestScope.cartService" value="cartService"/>	
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>
		</on-render>							
		<transition on="next" to="shipping"/>
		<transition on="continueShopping" to="categoriesExit"/>
	</view-state>		
	
	<view-state id="shipping" view="shipping">
		<on-render>
			<set name="requestScope.currentUser" value="currentUser"/>
			<set name="requestScope.cartService" value="cartService"/>
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>
		</on-render>		
		<transition on="next" to="isUserLoggedIn"/>
	</view-state>
	
	<decision-state id="isUserLoggedIn">
		<if test="accountService.isUserLoggedIn(currentUser)" then="payment"
			else="paymentSessionId" />
	</decision-state>	
	
	<view-state id="payment" view="payment" model="transactionLogValues">
		<on-render>
			<set name="requestScope.accountService" value="accountService"/>
			<set name="requestScope.cartService" value="cartService"/>
			<set name="requestScope.currentUser" value="currentUser"/>
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>	
			<evaluate expression="accountService.getAccountByName(currentUser.getPrincipal().getUsername())" result="flowScope.account" />		
		</on-render>	
		<transition on="next" to="createTransaction"/>
	</view-state>	
	
	<view-state id="paymentSessionId" view="paymentSessionId" model="transactionLogValues">
		<on-render>
			<set name="requestScope.accountService" value="accountService"/>
			<set name="requestScope.cartService" value="cartService"/>
			<set name="requestScope.currentUser" value="currentUser"/>
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>			
		</on-render>	
		<transition on="next" to="createTransactionFromSessionId"/>
	</view-state>		
	
	<!-- The createTransactionsFromCartList method will create transactions for the row in the user's cart. -->
	<action-state id="createTransaction">
		<evaluate expression="transactionService.createTransactionsFromCartList(cartService.getCartByUserLogin(currentUser.getPrincipal().getUsername()),currentSession,transactionLogValues.message,transactionLogValues.cardType,transactionLogValues.cardNumber,transactionLogValues.cardSecurityCode)"/>
        <transition to="review_order" />			
	</action-state>	
	
	<!-- If the user is not logged in, we create the transaction using their Session Id. -->
	<action-state id="createTransactionFromSessionId">
		<evaluate expression="transactionService.createTransactionsFromCartList(cartService.getCartBySessionId(currentSession),currentSession,transactionLogValues.message,transactionLogValues.cardType,transactionLogValues.cardNumber,transactionLogValues.cardSecurityCode)"/>
        <transition to="reviewOrderSessionId" />			
	</action-state>		
	
	<view-state id="review_order" view="review_order">
		<on-render>							
			<set name="requestScope.accountService" value="accountService"/>
			<set name="requestScope.cartService" value="cartService"/>
			<set name="requestScope.currentUser" value="currentUser"/>
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>
			<set name="requestScope.transactionService" value="transactionService"/>
			<evaluate expression="accountService.getAccountByName(currentUser.getPrincipal().getUsername())" result="flowScope.account" />
			<evaluate expression="transactionService.getLastTransactionByAccountId(account.getAccountId())" result="flowScope.lastTransaction" />							
		</on-render>	
		<transition on="proceedToCheckout" to="removeCart"/>
	</view-state>	
	
	<view-state id="reviewOrderSessionId" view="reviewOrderSessionId">
		<on-render>							
			<set name="requestScope.accountService" value="accountService"/>
			<set name="requestScope.cartService" value="cartService"/>
			<set name="requestScope.currentUser" value="currentUser"/>
			<set name="requestScope.inventoryService" value="inventoryService"/>
			<set name="requestScope.inventoryDetailService" value="inventoryDetailService"/>
			<set name="requestScope.transactionService" value="transactionService"/>
			<!-- <evaluate expression="accountService.getAccountByName(currentUser.getPrincipal().getUsername())" result="flowScope.account" /> -->
			<evaluate expression="transactionService.getLastTransactionBySessionId(currentSession)" result="flowScope.lastTransaction" />							
		</on-render>	
		<transition on="proceedToCheckout" to="removeCartSessionId"/>
	</view-state>			
	
	<action-state id="removeCart">
		<evaluate expression="transactionService.setTransactionToConfirmed(transactionService.getLastTransactionByAccountId(accountService.getAccountByName(currentUser.getPrincipal().getUsername()).getAccountId()).getTrackingNumber())" />
		<evaluate expression="cartService.removeCartFromCartList(cartService.getCartByUserLogin(currentUser.getPrincipal().getUsername()))">
			<attribute name="removeCartExpression" value="last" />
        </evaluate>
        <transition on="yes" to="invoice" />			
	</action-state>	
	
	<action-state id="removeCartSessionId">
		<evaluate expression="transactionService.setTransactionToConfirmed(transactionService.getLastTransactionBySessionId(currentSession).getTrackingNumber())" />
		<evaluate expression="cartService.removeCartFromCartList(cartService.getCartBySessionId(currentSession))">
			<attribute name="removeCartExpression" value="last" />
        </evaluate>
        <transition on="yes" to="invoice" />			
	</action-state>		
	
		
	<!-- See http://forum.springframework.org/showthread.php?t=51240 -->
	<!-- See also http://jira.springframework.org/browse/SWF-588 -->
	<!-- View applies only when directly called; calling flows ignore it? -->
	<end-state id="invoice" view="externalRedirect:contextRelative:/invoice"/>	
	<end-state id="categoriesExit" view="externalRedirect:contextRelative:/categories"/>
</flow>
